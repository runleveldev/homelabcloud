---
x-authentik-service: &authentik-service
  image: ghcr.io/runleveldev/homelabcloud/authentik-server:2025.6.4-1
  build:
    context: ./images/authentik-server
  depends_on: &authentik-service_depends-on
    docker-socket-proxy:
      condition: service_healthy
    postgresql:
      condition: service_healthy
    postgresql-init:
      condition: service_completed_successfully
    redis:
      condition: service_healthy
  volumes:
    - authentik_media:/media:z
    - authentik_certs:/certs:z
    - authentik_templates:/templates:z
  restart: unless-stopped
  environment:
    AUTHENTIK_BOOTSTRAP_EMAIL: ${AUTHENTIK_BOOTSTRAP_EMAIL}
    AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
    AUTHENTIK_REDIS__HOST: redis
    AUTHENTIK_POSTGRESQL__HOST: postgresql
    AUTHENTIK_POSTGRESQL__USER: authentik
    AUTHENTIK_POSTGRESQL__NAME: authentik
    AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_POSTGRESQL_PASSWORD}
    AUTHENTIK_LOG_LEVEL: debug
    BASE_DOMAIN: ${BASE_DOMAIN}
    GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
    GITHUB_SECRET: ${GITHUB_SECRET}

name: homelabcloud

services:
  authentik-init:
    <<: *authentik-service
    entrypoint: sh
    command: -c 'ak apply_blueprint /blueprints/custom/*'
    restart: on-failure:3
    depends_on:
      <<: *authentik-service_depends-on
      authentik-server:
        condition: service_healthy
      authentik-worker:
        condition: service_healthy

  authentik-server:
    <<: *authentik-service
    command: server
    healthcheck:
      test: [ "CMD", "ak", "healthcheck" ]
    labels:
      traefik.enable: true
      traefik.http.routers.authentik.rule: Host(`auth.${BASE_DOMAIN}`)
      traefik.http.routers.authentik.entrypoints: websecure
    expose:
      - '9000'
      - '9443'

  authentik-worker:
    <<: *authentik-service
    command: worker
    healthcheck:
      test: [ "CMD", "ak", "healthcheck" ]

  docker-socket-proxy:
    image: docker.io/tecnativa/docker-socket-proxy:0.3.0
    volumes:
      - ${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock
    environment:
      ALLOW_RESTARTS: 1
      CONTAINERS: 1
      IMAGES: 1
      INFO: 1
      POST: 1
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:2375/_ping" ]
    security_opt:
      - label=disable

  postgresql:
    image: docker.io/library/postgres:16-alpine
    volumes:
      - postgresql:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?database password required}
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]

  postgresql-init:
    image: gchr.io/runleveldev/homelabcloud/postgres-init:latest
    build:
      context: ./images/postgres-init
    environment:
      PGHOST: postgresql
      PGDATABASE: postgres
      PGUSER: postgres
      PGPASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_POSTGRESQL_PASSWORD: ${AUTHENTIK_POSTGRESQL_PASSWORD}
      PANGOLIN_POSTGRESQL_PASSWORD: ${PANGOLIN_POSTGRESQL_PASSWORD}
    restart: on-failure:3
    depends_on:
      postgresql:
        condition: service_healthy

  redis:
    image: docker.io/library/redis:alpine
    volumes:
      - redis:/data
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]

  traefik:
    image: docker.io/library/traefik:v3.5
    depends_on:
      docker-socket-proxy:
        condition: service_healthy
    volumes:
      - certs:/certs
    ports:
      - '51820:51820/udp'
      - '80:80'
      - '443:443'
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certresolver=letsencrypt
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.endpoint=tcp://docker-socket-proxy:2375
      - --providers.http.endpoint=http://pangolin:3001/api/v1/traefik-config
      - --providers.http.pollinterval=5s
      - --certificatesresolvers.letsencrypt.acme.email=${AUTHENTIK_BOOTSTRAP_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/certs/acme.json
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --api.dashboard=true
      - --api.insecure=false
      - --log.level=DEBUG
      - --accesslog=true
      - --experimental.plugins.badger.modulename=github.com/fosrl/badger
      - --experimental.plugins.badger.version=latest
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.traefik.rule: Host(`traefik.${BASE_DOMAIN}`)
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.middlewares: authentik@docker
      traefik.http.middlewares.authentik.forwardauth.address: http://ak-outpost-proxy-outpost:9000/outpost.goauthentik.io/auth/traefik
      traefik.http.middlewares.authentik.forwardauth.trustForwardHeader: true
      traefik.http.middlewares.authentik.forwardauth.authResponseHeaders: X-authentik-username,X-authentik-groups,X-authentik-entitlements,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version

  pangolin:
    image: ghcr.io/runleveldev/homelabcloud/pangolin:1.8.0-1
    build:
      context: ./images/pangolin
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
      postgresql-init:
        condition: service_completed_successfully
    environment:
      PANGOLIN_DASHBOARD_URL: https://pangolin.${BASE_DOMAIN}
      PANGOLIN_TUNNEL_DOMAIN: ${TUNNEL_DOMAIN}
      PANGOLIN_ENDPOINT: pangolin.${BASE_DOMAIN}
      PANGOLIN_SECRET: ${PANGOLIN_SECRET}
      PANGOLIN_POSTGRESQL_USER: pangolin
      PANGOLIN_POSTGRESQL_PASSWORD: ${PANGOLIN_POSTGRESQL_PASSWORD}
      PANGOLIN_POSTGRESQL_HOST: postgresql
      PANGOLIN_POSTGRESQL_NAME: pangolin
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/"]
      interval: "3s"
      timeout: "3s"
      retries: 15
    labels:
      traefik.enable: true
      traefik.http.services.pangolin-next.loadbalancer.server.port: 3002
      traefik.http.services.pangolin-api.loadbalancer.server.port: 3000
      traefik.http.routers.pangolin-next.rule: Host(`pangolin.${BASE_DOMAIN}`) && !PathPrefix(`/api/v1`)
      traefik.http.routers.pangolin-next.service: pangolin-next
      traefik.http.routers.pangolin-next.entrypoints: websecure
      traefik.http.routers.pangolin-api.rule: Host(`pangolin.${BASE_DOMAIN}`) && PathPrefix(`/api/v1`)
      traefik.http.routers.pangolin-api.service: pangolin-api
      traefik.http.routers.pangolin-api.entrypoints: websecure

  gerbil:
    image: docker.io/fosrl/gerbil:1.1.0
    restart: unless-stopped
    network_mode: service:traefik
    depends_on:
      pangolin:
        condition: service_healthy
    command:
      - --reachableAt=http://gerbil:3003
      - --generateAndSaveKeyTo=/var/config/key
      - --remoteConfig=http://pangolin:3001/api/v1/gerbil/get-config
      - --reportBandwidthTo=http://pangolin:3001/api/v1/gerbil/receive-bandwidth
    cap_add:
      - NET_ADMIN
    volumes:
      - gerbil:/var/config

volumes:
  certs:
    driver: local
  postgresql:
    driver: local
  redis:
    driver: local
  gerbil:
    driver: local
  authentik_media:
    driver: local
  authentik_templates:
    driver: local
  authentik_certs:
    driver: local
